import { existsSync, readFileSync, rmdirSync } from 'fs';

import { convertFromDirectory } from '../../index';

describe('Use double quotes for string escapes', () => {
  const typeOutputDirectory = './src/__tests__/doublequotesEscape/interfaces';

  test('default behavior / single quotes', async () => {
    if (existsSync(typeOutputDirectory)) {
      rmdirSync(typeOutputDirectory, { recursive: true });
    }
    const result = await convertFromDirectory({
      schemaDirectory: './src/__tests__/doublequotesEscape/schemas',
      typeOutputDirectory
    });

    expect(result).toBe(true);

    const readmeContent = readFileSync(`${typeOutputDirectory}/Allow.ts`).toString();

    expect(readmeContent).toBe(`/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export type Blank = string;

export type BlankNull = string | null | '';

/**
 * This is date
 */
export type DateOptions = Date | null;

/**
 * Test Schema Name
 */
export type Name = string;

export type NormalList = 'red' | 'green' | 'blue';

export type NormalRequiredList = 'red' | 'green' | 'blue';

/**
 * nullable
 */
export type NullName = string | null;

export type NullNumber = number | null;

export type Numbers = 1 | 2 | 3 | 4 | 5;
`);
  });

  test('doublequoteEscape: false / single quotes', async () => {
    if (existsSync(typeOutputDirectory)) {
      rmdirSync(typeOutputDirectory, { recursive: true });
    }
    const result = await convertFromDirectory({
      schemaDirectory: './src/__tests__/doublequotesEscape/schemas',
      typeOutputDirectory,
      doublequoteEscape: false,
    });

    expect(result).toBe(true);

    const readmeContent = readFileSync(`${typeOutputDirectory}/Allow.ts`).toString();

    expect(readmeContent).toBe(`/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export type Blank = string;

export type BlankNull = string | null | '';

/**
 * This is date
 */
export type DateOptions = Date | null;

/**
 * Test Schema Name
 */
export type Name = string;

export type NormalList = 'red' | 'green' | 'blue';

export type NormalRequiredList = 'red' | 'green' | 'blue';

/**
 * nullable
 */
export type NullName = string | null;

export type NullNumber = number | null;

export type Numbers = 1 | 2 | 3 | 4 | 5;
`);
  });

  test('doublequoteEscape: true / double quotes', async () => {
    if (existsSync(typeOutputDirectory)) {
      rmdirSync(typeOutputDirectory, { recursive: true });
    }
    const result = await convertFromDirectory({
      schemaDirectory: './src/__tests__/doublequotesEscape/schemas',
      typeOutputDirectory,
      doublequoteEscape: true,
    });

    expect(result).toBe(true);

    const readmeContent = readFileSync(`${typeOutputDirectory}/Allow.ts`).toString();

    expect(readmeContent).toBe(`/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export type Blank = string;

export type BlankNull = string | null | "";

/**
 * This is date
 */
export type DateOptions = Date | null;

/**
 * Test Schema Name
 */
export type Name = string;

export type NormalList = "red" | "green" | "blue";

export type NormalRequiredList = "red" | "green" | "blue";

/**
 * nullable
 */
export type NullName = string | null;

export type NullNumber = number | null;

export type Numbers = 1 | 2 | 3 | 4 | 5;
`);
  });

});
