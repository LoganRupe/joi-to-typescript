import { existsSync, readFileSync, rmdirSync } from 'fs';

import { convertFromDirectory } from '../../index';

describe('header/footer content', () => {
  const typeOutputDirectory = './src/__tests__/headerFooter/interfaces';

  beforeAll(() => {
    if (existsSync(typeOutputDirectory)) {
      rmdirSync(typeOutputDirectory, { recursive: true });
    }
  });

  test('headerFooter from file', async () => {
    const result = await convertFromDirectory({
      schemaDirectory: './src/__tests__/headerFooter/schemas',
      typeOutputDirectory,
      sortPropertiesByName: false,
      tsContentHeader: type => `// [block "${type.interfaceOrTypeName}" begin]`,
      tsContentFooter: type => `// [block "${type.interfaceOrTypeName}" end]`
    });

    expect(result).toBe(true);

    const oneContent = readFileSync(`${typeOutputDirectory}/One.ts`).toString();
    expect(oneContent).toBe(
      `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

// [block "Basic" begin]
/**
 * a description for basic
 */
export type Basic = number | string;
// [block "Basic" end]

// [block "Other" begin]
export interface Other {
  other?: string;
}
// [block "Other" end]

// [block "Thing" begin]
export interface Thing {
  thing: string;
}
// [block "Thing" end]
`
    );
  });
});
